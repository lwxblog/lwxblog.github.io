<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>lwxblog.github.io/</title>
   
   <link></link>
   <description>I blog here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>JWT Authentication in React App (Web)</title>
	  <link>//jwt-authentication-in-react-app</link>
	  <author></author>
	  <pubDate>2020-03-12T08:00:00+08:00</pubDate>
	  <guid>//jwt-authentication-in-react-app</guid>
	  <description><![CDATA[
	     <p>Some thoughts on JWT authentication in a React App.</p>

<p>I am relatively new to React, I started writing React in September 2019. Having watched a 1-hour crash course on YouTube, I found React to be one of the easiest frontend framework to pick up, especially when compared to Angular.</p>

<p>I have gotten used to using React for every personal project I build for web. However, recently, I have a project that grew a bit bigger and I was using JWT for authentication. I must admit, I have very little implementational experience regarding JWT and JWT in React. My inital approach was simple, and works for small-scale apps. I would simply check for the presence of a JWT token in every protected component, via a lifecycle method, e.g. useEffect() or componentDidMount().</p>

<p>This very quickly revealed its flaws, each additional component that requires authentication will require the same (repeated) code, which violates the DRY principle. A bit of reading and I found that the authentication logic can be abstracted by simply wrapping a Route in a closure and performing the auth logic within, with a redirect to a landing page if user is not authenticated.</p>

<p><del>I have yet to try it out, but it is quite straightforward and clear that it will work.</del>
It works.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">"/"</span> <span class="nx">exact</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Component1</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">
</span>      <span class="o">&lt;</span><span class="nx">AuthContainer</span> <span class="nx">path</span><span class="o">=</span><span class="s2">"/protected"</span> <span class="nx">exact</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Component2</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">
</span>    <span class="o">&lt;</span><span class="sr">/BrowserRouter&gt;</span><span class="err">
</span>  <span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="s1">'react'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Route</span><span class="p">,</span> <span class="nx">Redirect</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'react-router-dom'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AuthContainer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">isAuthenticated</span><span class="p">()</span>
        <span class="p">?</span>
        <span class="o">&lt;</span><span class="nx">Route</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">
</span>        <span class="p">:</span>
        <span class="o">&lt;</span><span class="nx">Redirect</span> <span class="nx">to</span><span class="o">=</span><span class="s2">"/"</span> <span class="o">/&gt;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">AuthContainer</span></code></pre></figure>

<p>When user is authenticated (true), protected route is accessible. When false, a redirect to “/” is returned instead.</p>

<p>What’s eating me though, is that for a SPA, regardless of what authentication method is being used. The user <em>can</em> actually bypass the mechanism being used, as the logic is completely client-sided. Of course, this might not be an issue, since each endpoint should authenticate the JWT as well. My thoughts are:</p>

<ol>
  <li>Is there a way around it, to prevent user from being able to <em>view</em> protected pages by spoofing a JWT.</li>
  <li>Is it a problem that a user could potentially do the above.</li>
</ol>

<p>Just to be clear, by spoofing, I really mean an invalid JWT which would fail in server-sided verification but should pass in client-sided checks since the only way the client can check would be to have the secret as well, but it will defeat the purpose of JWT.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Jekyll For Blogging</title>
	  <link>//jekyll-for-blogging</link>
	  <author></author>
	  <pubDate>2020-03-09T08:00:00+08:00</pubDate>
	  <guid>//jekyll-for-blogging</guid>
	  <description><![CDATA[
	     <p>This blog is done in Jekyll. Which is why it seems only fitting to have the first post about Jekyll.</p>

<p>Truth be told, I had never heard of Jekyll until I googled for static site generators. What drew my attention was the fact that it’s written in Ruby. Having used Ruby on Rails before, I wanted to see the difference/similarities between Jekyll and RoR. I didn’t really know what to expect since I have never used a static site generator. But I had some baseline expectations:</p>

<ol>
  <li>Write markdown</li>
  <li>Parse it into html</li>
</ol>

<p>Jekyll met and exceeded my expectations. It somehow organizes all my posts and tags, allowing for easy searching and navigation. I have to dig more into how it’s implemented and the magic behind it. Color me impressed.</p>

	  ]]></description>
	</item>


</channel>
</rss>
